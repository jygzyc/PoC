package fun.lilac.exploit.utils;

import android.os.Build;
import android.os.IBinder;
import android.util.Log;

import androidx.annotation.RequiresApi;

import com.elvishew.xlog.XLog;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.chickenhook.restrictionbypass.RestrictionBypass;

import fun.lilac.exploit.Constants;

public class SerivceUtil {

    private static final String TAG = "ServiceUtil";
    private static Class serviceManager;

    static {
        try {
            serviceManager = Class.forName("android.os.ServiceManager");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    public SerivceUtil(){
        XLogUtil.initXLog();
    }

    /**
     * 获取一个服务的ServiceInfo
     * @param serviceName
     * @return
     */
    public static ServiceInfo getServiceInfo(String serviceName){
        if(serviceName == null){
            return null;
        }
        Map<Integer, List<String>> methodInfo = new HashMap<>();
        String interfaceDescriptor = getInterfaceDescriptor(serviceName);
        ServiceInfo serviceInfo = new ServiceInfo();
        if(interfaceDescriptor == null){
            serviceInfo.setServiceName(serviceName);
            serviceInfo.setMethodInfo(null);
            return serviceInfo;
        }
        try{
            Class<?> classStub = Class.forName(interfaceDescriptor + "$Stub$Proxy");
            Method[] methods = classStub.getDeclaredMethods();
            HashMap<String, Integer> tempMethodMap = getMethodMap(interfaceDescriptor);
            for(Method method : methods){
                method.setAccessible(true);
                String methodName = method.getName();
                int methodCode = 0;
                for(String key : tempMethodMap.keySet()){
                    if(methodName.contains(key.substring("TRANSACTION_".length()))){
                        methodCode = tempMethodMap.get(key);
                    }
                }
                if(methodCode == 0)
                    continue;
                String parameterTypeStr = getParamterTypeStr(method);
                String returnType = getReturnType(method);
                List<String> methodSignature = Arrays.asList(methodName, parameterTypeStr, returnType);
                methodInfo.put(methodCode, methodSignature);
            }
            return serviceInfo.setServiceInfo(serviceName, methodInfo);
        }catch (ClassNotFoundException e) {
            Log.e(TAG, "Serivce " + serviceName + "$Stub$Proxy ClassNotFoundException");
            serviceInfo.setServiceName(serviceName);
            serviceInfo.setMethodInfo(null);
        }catch (Exception e){
            e.printStackTrace();
        }
        return serviceInfo;
    }


    private static String getParamterTypeStr(Method method){
        method.setAccessible(true);
        Class[] params = method.getParameterTypes();
        String returnStr = "";
        for(Class i : params){
            returnStr += i.getName() + ";";
        }
        return returnStr.length() > 0 && ";".equals(returnStr.substring(returnStr.length() - 1)) ?
                returnStr.substring(0, returnStr.length() - 1):returnStr;
    }

    private static String getReturnType(Method method){
        method.setAccessible(true);
        return method.getReturnType().getName();
    }

    /**
     * 利用反射获取对应接口的所有methodMap
     * @param interfaceDescriptor
     * @return
     */
    private static HashMap<String,Integer> getMethodMap(String interfaceDescriptor) {
        HashMap<String, Integer> codes = new HashMap<>();
        if (interfaceDescriptor == null)
            return codes;
        try {
            Class<?> cStub = Class.forName(interfaceDescriptor + "$Stub");
            Field[] f = cStub.getDeclaredFields();
            for (Field field : f) {
                field.setAccessible(true);
                String k= field.toString().split("\\$Stub\\.")[1];
                if (k.contains("TRANSACTION_") && field.getInt(null) > 0)
                    codes.put(k, field.getInt(null));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return codes;
    }

    /**
     * 获取整机服务列表
     * @return
     */
    public static String[] getServiceNameList(){
        String[] serviceNameList = {};
        try{
            serviceNameList = (String[]) serviceManager.getDeclaredMethod("listServices").invoke(null);
        }catch (Exception e){
            e.printStackTrace();
        }
        return serviceNameList;
    }


    /**
     * 获取Service的InterfaceDescriptor
     * @param serviceName
     * @return
     */
    public static String getInterfaceDescriptor(String serviceName){
        try{
            //Method getService = RestrictionBypass.getDeclaredMethod(serviceManager, "getService", String.class);
            Method getService = serviceManager.getMethod("getService", String.class);
            IBinder serviceBinder = (IBinder) getService.invoke(serviceManager.newInstance(), serviceName);
            if(serviceBinder == null){
                Log.e(TAG,  "Service " + serviceName + " Binder is null");
                return null;
            }
            String interfaceDescriptor = serviceBinder.getInterfaceDescriptor();
            return interfaceDescriptor.length() != 0 ? interfaceDescriptor : null;
        }catch (Exception e){
            Log.e(TAG, "Service " + serviceName + " get InterfaceDecriptor failed!");
            return null;
        }
    }
}
